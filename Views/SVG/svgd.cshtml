@model eyemusic45.Models.ViewModels.eyeMusicModel


@{
    Layout = "";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>MathMusic</title>
    <link rel="stylesheet" type="text/css" href="~/App_Themes/bootstrap.min.css">
    <meta name="viewport" content="width=device-width" />

    @Scripts.Render("~/bundles/modernizr")
    <script type="text/javascript" src="~/Scripts/jquery.js"></script>
    <script src="@Url.Content("~/Scripts/jquery.svg.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.svgdom.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.filedrop.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.hotkeys.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.svg.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.svg.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.svgdom.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.filedrop.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.hotkeys.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.svg.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/Scripts/StackBlur.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/rgbcolor.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/canvg.js")" type="text/javascript"></script>


    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-57936827-1', 'auto');
        ga('send', 'pageview');

    </script>
    <script type="text/javascript" src="../Scripts/languages.js"></script>
    <script type="text/javascript" src="../mespeak/mespeak.js"></script>
    <script type="text/javascript">

        window.numLesson = 1;
        var startFrom;

        meSpeak.loadConfig("../mespeak/mespeak_config.js");
        meSpeak.loadVoice("../mespeak/voices/en/en-us.js");
        var array = new Array();
        var stream1;
        var allStream = new Array();
        var singleVoices = new Array();
        var numStream = 0;
        var maxNum = 0;
        var insert = true;


        //parmter for change and check
        var thespeed = 100;
        var AppreciateTime = 0;//1300;
        var len = 'h';
        var startGap = 300;
        var coupling = 35;

        var TheLen;
        var externalData;
        var svgOut;

        var viewBox = 0;
        var BluLineLoc = new Array();
        var allLineStream;
        var prevX = -1000;
        var prevY = 0;
        var first = true;
        var foundAxis = false;

        var magicNumber = 20;
        var numBlue = 0;

        var AllImages = new Array();
        var indexImageArrow = 0;

        //var minSpeech = 1000;

        function speechit(data) {
            var all_numbers = data.split(';');

            //found the number of line blue
            numBlue = 0;
            var indexSpeech = 0;
            var last = false;
            var first = true;
            BluLineLoc = new Array();
            array = new Array();
            allStream = new Array();
            singleVoices = new Array();

            //count how many blue lines is needed
            for (i = 1; i < all_numbers.length; i++) {
                var thisNumber = all_numbers[i].split(',');

                //Add blue linewhere have many Y axis numbers
                //checks if its a graph by tchecking whether there are 2 numbers which are above each other
                //this if checks if they are close enough
                if (Math.abs(prevX - thisNumber[3]) < magicNumber) {
                    //add numBlue for the prev number
                    if (first) {
                        //add the prev number
                        numBlue++;
                        first = false;
                    }
                    numBlue++;
                }
                prevX = thisNumber[3];
            }


            if (numBlue == 0) {
                var all_numbers = data.split(';');

                for (i = 1; i < all_numbers.length; i++) {
                    var thisNumber = all_numbers[i].split(',');
                    //percent - the time of silence
                    //divide the time of silence by 2 - because mespeak does the same silence time before and after the text
                    thisNumber[2] = thisNumber[2] / 2;
                    //speak "Silence" - create space
                    array.push({ text: "", voice: TheLen, variant: "m3", rawdata: true, pitch: thisNumber[1], wordgap: thisNumber[2], speed: 300 });
                    //speak the text
                    array.push({ text: thisNumber[0], voice: TheLen, variant: "m3", rawdata: true, pitch: thisNumber[1], wordgap: 0, speed: 300 });
                    stream1 = meSpeak.speakMultipart(array, { rawdata: true });
                    singleVoices.push(stream1);
                    array = new Array();
                }

                allStream.push(singleVoices);
                maxNum = numStream;
                singleVoices = new Array();
            }
                //if have blue line
            else {
                allLineStream = new Array(numBlue);
                for (var forint = 0; forint < numBlue; forint++) {
                    allLineStream[forint] = new Array();
                }

                var PrevNumber = all_numbers[1].split(',');

                for (i = 2; i < all_numbers.length; i++) {
                    var thisNumber = all_numbers[i].split(',');

                    PrevNumber[2] = PrevNumber[2] / 2;
                    array.push({ text: "", voice: TheLen, variant: "m3", rawdata: true, pitch: PrevNumber[1], wordgap: PrevNumber[2], speed: 300 });
                    array.push({ text: PrevNumber[0], voice: TheLen, variant: "m3", rawdata: true, pitch: PrevNumber[1], wordgap: 0, speed: 300 });
                    stream1 = meSpeak.speakMultipart(array, { rawdata: true });

                    //Add blue linewhere have many Y axis numbers
                    if (Math.abs(PrevNumber[3] - thisNumber[3]) < magicNumber) {
                        allLineStream[indexSpeech++].push(stream1);
                        BluLineLoc.push(PrevNumber[4]);
                        last = true;
                    }
                    else if (last) {
                        allLineStream[indexSpeech++].push(stream1);
                        BluLineLoc.push(PrevNumber[4]);
                        last = false;
                    }
                    else {
                        for (var inx in allLineStream) {
                            allLineStream[inx].push(stream1)
                        }
                    }

                    array = new Array();
                    PrevNumber = thisNumber;

                    //prevX = thisNumber[3];
                    //prevY = thisNumber[4];

                    /*if (thisNumber[1] > maxSpeech)
                        maxSpeech = thisNumber[1];

                    if (thisNumber[1] < minSpeech)
                        minSpeech = thisNumber[1];
                    */

                    /*thisNumber[2] = thisNumber[2] / 2;
                    array.push({ text: "", voice: TheLen, variant: "m3", rawdata: true, pitch: thisNumber[1], wordgap: thisNumber[2], speed: 300 });
                    array.push({ text: thisNumber[0], voice: TheLen, variant: "m3", rawdata: true, pitch: thisNumber[1], wordgap: 0, speed: 300 });
                    stream1 = meSpeak.speakMultipart(array, { rawdata: true });

                    for (var inx in allLineStream)
                    {
                        allLineStream[inx].push(stream1)
                    }
                    */
                    //singleVoices.push(stream1);
                    //array = new Array();
                }

                PrevNumber = all_numbers[all_numbers.length - 1].split(',');

                PrevNumber[2] = PrevNumber[2] / 2;
                array.push({ text: "", voice: TheLen, variant: "m3", rawdata: true, pitch: PrevNumber[1], wordgap: PrevNumber[2], speed: 300 });
                array.push({ text: PrevNumber[0], voice: TheLen, variant: "m3", rawdata: true, pitch: PrevNumber[1], wordgap: 0, speed: 300 });
                stream1 = meSpeak.speakMultipart(array, { rawdata: true });

                if (last) {
                    allLineStream[indexSpeech++].push(stream1);
                    BluLineLoc.push(PrevNumber[4]);
                    last = false;
                }
                else {
                    for (var inx in allLineStream) {
                        allLineStream[inx].push(stream1)
                    }
                }

                //allStream.push(singleVoices);
                allStream = allLineStream;
                maxNum = inx;
                //maxNum = numStream;
                //singleVoices = new Array();

                //sort alllinestream and BlueLineLoc according to Y axis
                var NewBlueLineLoc = new Array(BluLineLoc.length);
                var Newalllinestream = new Array(allLineStream.length);
                var finishI = 0;

                for (var j = 0; j < NewBlueLineLoc.length; j++) {

                    //more from max passibale
                    NewBlueLineLoc[j] = 1000000;

                    for (var i = 0; i < BluLineLoc.length; i++) {
                        if (parseInt(BluLineLoc[i]) < parseInt(NewBlueLineLoc[j])) {
                            NewBlueLineLoc[j] = BluLineLoc[i];
                            Newalllinestream[j] = allLineStream[i];

                            //not found on next iteration
                            finishI = i;
                        }
                    }
                    BluLineLoc[finishI] = 1000000;
                }

                BluLineLoc = NewBlueLineLoc;
                allLineStream = Newalllinestream;
                allStream = allLineStream;

            }
        }



        function adjust() {
            startFrom = document.getElementById("thePlayImage").offsetLeft - 25;
            window.addEventListener('resize', resize, false);

            if ("@Model.len" == "h") {
                window.lan = 'h';
                meSpeak.loadVoice("../mespeak/voices/pl.js");
                TheLen = "pl";

                doChange();
            }
            else {
                window.lan = 'e';
                meSpeak.loadVoice("../mespeak/voices/en/en-us.js");
                TheLen = "en/en-us";
                doChange();
            }

        }

        function resize() {
            startFrom = document.getElementById("thePlayImage").offsetLeft - 25;
            foo = document.getElementById('fooObject'); // get the "foo" object
            foo.style.left = startFrom + 'px'; // set its initial position to 0px
            clearInterval(dd);
        }

        function doChange() {
            document.getElementById("dragTitle").innerHTML = retstr(54);
            document.getElementById("guide").innerHTML = retstr(41) + retstr(42) + retstr(43);
            document.getElementById("UIplayButton").innerHTML = retstr(45);
            document.getElementById("Uploaded").innerHTML = retstr(46);
        }

        window.onload = adjust;
    </script>
</head>

<body onunload="" id="body1" dir="rtl">

<div id="dropZone" class="fadeMe">
    
    <canvas id="canvas" style="width:50px;height:30px"></canvas>
    <canvas id="canvas2" style="width:50px;height:30px"></canvas>
    <button id="playnext" onclick="ajaxapload()"> next lesson </button>
    <h2 id="lessonTitle"></h2>
    <h5 id="dragTitle"></h5>
    <h5 id="guide"></h5>

    <div id="downloadlink">


    </div>


    <style>
        div.fadeMe {
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
        }

        #fooObject {
            /* simple box */
            position: absolute;
            border-left: thick solid #FF0000;
        }
    </style>


    <div style="background-color: #FFFFFF; height: 200px; width: 100px">

        <div class="float-left" style="width:100px">
            @{
                string dds = "~/../../Images/blank.bmp";

                <img id="thePlayImage" src="@dds" />
            }


            <div id="fooObject">
                &nbsp;
            </div>


            <table style="width: 300px; margin-top: 20px">
                <tr>
                    <td>
                        <button title="Play" id="UIplayButton" onclick="UIplayButton_click()"></button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button title="Play" id="UIMeSpeakButton" onclick="UImeSpakeButton_click()">הפעל והשתק את ההקראה</button>
                    </td>
                </tr>

            </table>
        </div>


        <h2 id="Uploaded">
            Uploaded Files:
        </h2>
    </div>
    <div style="clear:both;margin-top:100px" id="uploadResult1">

    </div>

    <audio id="thePlayaudio" controls hidden="hidden">
        @{
            <source type="audio/mp3">
        }
        Your browser does not support the audio element.
    </audio>

    <script type="text/javascript">


        $(document).bind('keydown', 'ctrl', function () {
            UIplayButton_click();
        });

        $(document).bind('keydown', 'alt', function () {
            UImeSpakeButton_click();
        });

        $(document).bind('keydown', '1', function () {
            if (document.getElementById("thePlayaudio").playbackRate < 3.50)
                document.getElementById("thePlayaudio").playbackRate += 0.1;
        });

        $(document).bind('keydown', '2', function () {
            if (document.getElementById("thePlayaudio").playbackRate > 0.59)
                document.getElementById("thePlayaudio").playbackRate -= 0.1;
        });

        $(document).bind('keydown', 'up', function () {

            if (indexImageArrow > 0) {
                indexImageArrow--;
                sendajax(AllImages[indexImageArrow], indexImageArrow);
            }
        });

        $(document).bind('keydown', 'down', function () {
            if (indexImageArrow < (AllImages.length - 1)) {
                indexImageArrow++;
                sendajax(AllImages[indexImageArrow], indexImageArrow);
            }
        });


        var play = false;
        var playMesSpeak = false;

        var numDrag = 0;

        myAudio = document.getElementById("thePlayaudio");

        myImage = document.getElementById("thePlayImage");
        myImage.style.visibility = 'hidden';

        //after one time - start again (stop and starts the mespeak and the EM together again)
        handlerBeep = function () {
            setTimeout(function () {    //  call a 3s setTimeout when the loop is called

                myAudio.currentTime = 0;
                myAudio.pause();
                myAudio.play();

                if (playMesSpeak) {
                    meSpeak.stop();

                    if (allStream.length != 0) {
                        for (i = 0; i < allStream[maxNum].length; i++) {
                            meSpeak.play(allStream[maxNum][i]);
                        }
                    }
                }
                init();
                //  ..  setTimeout()
            }, 1000)
        }


        myAudio.addEventListener('ended', handlerBeep, false);

        function UImeSpakeButton_click() {
            if (playMesSpeak == false) {

                /*
                for (i = 0; i < allStream[maxNum].length; i++) {
                    meSpeak.play(allStream[maxNum][i]);
                }*/
                playMesSpeak = true;

                UIplayButton_click();
                UIplayButton_click();
            }
            else {
                playMesSpeak = false;
                meSpeak.stop();
            }
        }

        //when pressing play/stop
        function UIplayButton_click() {

            if (play == false) {

                meSpeak.stop();

                if (foo == null) {
                    init();
                }
                else {
                    clearInterval(dd);
                    dd = setInterval(doMove, 17);
                }

                myAudio.addEventListener('ended', handlerBeep, false);
                myAudio.play();

                if (playMesSpeak && allStream != null && allStream.length != 0) {
                    for (i = 0; i < allStream[maxNum].length; i++) {
                        meSpeak.play(allStream[maxNum][i]);
                    }
                }

                play = true;
                //playMesSpeak = true;


                if (parseInt(foo.style.left) > 300 + startFrom) {
                    init();
                }

            }
            else {
                myAudio.removeEventListener('ended', handlerBeep, false);
                play = false;
                //playMesSpeak = false;

                myAudio.pause();
                myAudio.currentTime = 0;

                foo.style.left = startFrom + 'px';
                clearInterval(dd);
                meSpeak.stop();

            }

        }



        var foo = null; // object
        var dd;

        function doMove() {
            foo.style.left = parseInt(foo.style.left) + Math.floor(2 * (50 / thespeed) * document.getElementById("thePlayaudio").playbackRate) + 'px';

            if (parseInt(foo.style.left) > 300 + startFrom) {
                clearInterval(dd);
            }
        }

        function init() {
            document.getElementById("thePlayaudio").volume = 0.5;
            foo = document.getElementById('fooObject'); // get the "foo" object
            foo.style.left = startFrom + 'px'; // set its initial position to 0px
            clearInterval(dd);
            dd = setInterval(doMove, 17);
        }

        function init1() {
            myImage.style.visibility = 'visible';
            init();
        }

        function init2() {

            var vid = document.getElementById("thePlayaudio");

            vid.oncanplay = null;

            myAudio.addEventListener('ended', handlerBeep, false);
            play = true;
            playMesSpeak = true;


            init();
        }

    </script>





    <script type="text/javascript">
        function sendajax(tosend, numst) {
            indexImageArrow = numst;
            clearInterval(dd);
            myAudio.removeEventListener('ended', handlerBeep, false);
            play = false;
            playMesSpeak = false;
            myAudio.pause();
            myAudio.currentTime = 0;
            //foo.style.left = startFrom + 'px';

            $.ajax({
                url: '@Url.Action("ajaxregSVG")',
                type: 'post',
                data: JSON.stringify({ fileName: tosend }),
                contentType: 'application/json',
                success: function (data) {
                    $("#thePlayImage").attr("src", "~/../../" + data.image);
                    $("#thePlayaudio").attr("src", "~/../../" + data.voice);
                    var vid = document.getElementById("thePlayaudio");
                    clearInterval(dd);

                    vid.oncanplay = function () {
                        init2();

                        if (allStream.length != 0) {
                            for (i = 0; i < allStream[maxNum].length; i++) {
                                meSpeak.play(allStream[maxNum][i]);
                            }
                        }
                    }

                    meSpeak.stop();
                    $("#thePlayaudio")[0].play();
                    maxNum = numst;

                }
            });
        };

    </script>


    <script type="text/javascript">

        function addpicture(data) { //add a picture button
            if (data.image != "") {
                $("#thePlayImage").attr("src", "~/../../" + data.image);
                $("#thePlayaudio").attr("src", "~/../../" + data.voice);

                numDrag++;
                if (numDrag < 200) {
                    $('#uploadResult1').append(
                    '<input type="hidden" name="selectedImage" value="' + data.image + '"/>' +
                    '<button id=' + data.image + ' onclick="sendajax(' + "'" + data.image + "','" + numStream + "'" + ')"> <img src="~/../../' + data.image + '" alt=' + data.image + '" id="pic' + data.image + '" style="width:75px;float:left" /> </button>');
                }
                else {
                    $('#uploadResult1').html('');
                    numDrag = 1;

                    $('#uploadResult1').append(
                    '<input type="hidden" name="selectedImage" value="' + data.image + '"/>' +
                    '<button id=' + data.image + ' onclick="sendajax(' + "'" + data.image + "','" + numStream + "'" + ')"> <img src="~/../../' + data.image + '" alt=' + data.image + '" id="pic' + data.image + '"style="width:75px;float:left" /> </button>');
                }
                /*
                        var vid = document.getElementById("thePlayaudio");
                        clearInterval(dd);
                        vid.oncanplay = function () {
                            init2();
                            if (insert)
                                for (i = allStream[numStream - 1].length - 1; i >= 0; i--) {
                                    meSpeak.play(allStream[numStream - 1][i]);
                                }
                        }
                        */
                meSpeak.stop();
                //$("#thePlayaudio")[0].play();
                //playMesSpeak = true;
                myImage.style.visibility = 'visible';

                if (insert)
                    numStream++;
            }
        }


        //The procces of SVG
        function TheRecorsive(svg) {


            for (var i = 0; i < svg.childNodes.length; i++) {


                /*if (svg.childNodes[i].attributes != null && svg.childNodes[i].attributes["viewBox"] != null) {
                    viewBox = svg.childNodes[i].attributes["viewBox"].value.Split(' ')[3]
                }*/

                if (svg.childNodes[i].nodeName == "text" && svg.childNodes[i].attributes != null && svg.childNodes[i].attributes["style"] != null) {

                    //change the background to black
                    if (svg.childNodes[i].attributes["style"].value.indexOf('fill') > -1) {
                        svg.childNodes[i].attributes["style"].value =
                            svg.childNodes[i].attributes["style"].value.replace(/fill:#[abcdef 0-9]*;/, 'fill:#000000;')
                    }
                }

                //for geofebra change line width from max of 6.5 to 20
                if (svg.childNodes[i].nodeName == "g") {
                    if (svg.childNodes[i].attributes != null)
                        if (svg.childNodes[i].attributes["stroke-width"] != null) {
                            //svg.childNodes[i].attributes["stroke-width"].value = svg.childNodes[i].attributes["stroke-width"].value.replace("6.5000", "20");
                            svg.childNodes[i].attributes["stroke-width"].value = "20";
                        }

                }

                //for SVG from wikipedia
                if (svg.childNodes[i].nodeName == "svg") {
                    if (svg.childNodes[i].attributes != null && svg.childNodes[i].attributes["viewport-fill"] != null) {
                        svg.childNodes[i].attributes["viewport-fill"].value = "black";
                    }
                    else if (svg.childNodes[i].attributes != null) {
                        svg.childNodes[i].setAttribute("viewport-fill", "black");
                    }

                }

                if (svg.childNodes[i].nodeName == "g") {
                    if (svg.childNodes[i].attributes != null && svg.childNodes[i].attributes["style"] != null)
                        if (svg.childNodes[i].attributes["style"].value.indexOf('stroke-width') > -1) {
                            //svg.childNodes[i].attributes["stroke-width"].value = svg.childNodes[i].attributes["stroke-width"].value.replace("6.5000", "20");
                            svg.childNodes[i].attributes["style"].value =
                            svg.childNodes[i].attributes["style"].value.replace(/stroke-width:[. 0-9]*;/, 'stroke-width:20;')
                        }

                }

                TheRecorsive(svg.childNodes[i]);
            }

            return svg;
        }

        var parseXml;

        if (typeof window.DOMParser != "undefined") {
            parseXml = function (xmlStr) {
                return (new window.DOMParser()).parseFromString(xmlStr, "text/xml");
            };
        } else if (typeof window.ActiveXObject != "undefined" &&
               new window.ActiveXObject("Microsoft.XMLDOM")) {
            parseXml = function (xmlStr) {
                var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        } else {
            throw new Error("No XML parser found");
        }

        function canvasProceess(data, text) {

            //var xmlText2 = xmlText;
            AllImages = new Array();
            indexImageArrow = 0;

            if (numBlue == 0) {
                var xmlText = parseXml(text);
                //send the xml of the svg to TheRecorsive function in order to process the SVG image and change what we want (e.g. change background to black)
                var xmlText2 = TheRecorsive(xmlText);
                //var xmlText2 = xmlText;
                var finishstring = new XMLSerializer().serializeToString(xmlText2);
                //console.log(finishstring);

                data = '../' + data;
                var canvas2 = document.getElementById("canvas2");
                //put the svg in canvas (Whjich is in hide)
                canvg(canvas2, finishstring);
                //create a png image from the canvas
                var image = canvas2.toDataURL("image/png").replace('data:image/png;base64,', '');
                canvas2.style.display = "none";

                $.ajax({ //sends the picture to the EM and get BMP image and sound back
                    type: 'POST',
                    url: '@Url.Action("canvasUploadLesson")',
                    data: '{ "imageData" : "' + image + '" }',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {

                        addpicture(data)
                        sendajax(data.image, 0);

                    }
                });

                canvas.style.display = "none";
            }
            else {
                //Add a blue line at five higehts
                for (var i in BluLineLoc) {
                    var xmlText = parseXml(text);
                    var xmlText2 = TheRecorsive(xmlText);

                    var xmlText3 = addBlueLine(xmlText2, BluLineLoc[i]);
                    var finishstring = new XMLSerializer().serializeToString(xmlText3);
                    //console.log(finishstring);

                    data = '../' + data;
                    var canvas2 = document.getElementById("canvas2");
                    canvg(canvas2, finishstring);
                    var image = canvas2.toDataURL("image/png").replace('data:image/png;base64,', '');
                    canvas2.style.display = "none";

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("canvasUploadLesson")',
                        data: '{ "imageData" : "' + image + '" }',
                        async: false,
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        success: function (data) {

                            AllImages.push(data.image);

                            addpicture(data)

                        }
                    });

                    canvas.style.display = "none";
                }

                if (AllImages.length > 0)
                    sendajax(AllImages[AllImages.length - 1], AllImages.length - 1);
            }
        }

        function addBlueLine(Xml, blueLine) {
            newEle = Xml.createElement("path");
            newEle.setAttribute("style", "fill:#0000ff;fill-opacity:1;stroke:#0c00f4;stroke-width:20;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none");
            newEle.setAttribute("d", "M 0 " + blueLine + " l 999999 0");
            //Xml.childNodes[0].appendChild(newEle);
            Xml.childNodes[0].insertBefore(newEle, Xml.childNodes[0].firstChild);
            return Xml;
        }


        /*function submitAll() {
            var formdata = new FormData(); //FormData object
            var fileInput = document.getElementById('fileInput');

            reinit();

            //Iterating through each files selected in fileInput
            for (i = 0; i < fileInput.files.length; i++) {
                //Appending each file to FormData object
                formdata.append(fileInput.files[i].name, fileInput.files[i]);

            }
            //Creating an XMLHttpRequest and sending

            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'Url.Action("UploadBlinedSVG")');
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var espsplit = xhr.responseText.replace('"', '').split("?");
                    var data = { image: espsplit[0].replace('"', '') }.image.replace('"}', "");
                    var number = { image: espsplit[2].replace('"', '') }.image.replace('"}', "");
                    var textSvg = { image: espsplit[1].replace('"', '') }.image.replace('"}', "");


                    insert = false

                    if (number != null && number != "") {
                        speechit(number);
                        insert = true
                    }

                    canvasProceess(data, textSvg);
                }
            }
            return false;
        }
        */

        function reinit() {

            $('#uploadResult1').html('');
            numDrag = 0;
            numStream = 0;
            myAudio.removeEventListener('ended', handlerBeep, false);
            play = false;
            playMesSpeak = false;

            myAudio.pause();
            myAudio.currentTime = 0;

            clearInterval(dd);
            meSpeak.stop();

            $("#thePlayImage").attr("src", "~/../../Images/blank.bmp");

        }

        
        function ajaxapload() {

            reinit();

            $.ajax({
                url: '@Url.Action("playNext")',
                type: 'post',
                data: JSON.stringify({
                    speed: thespeed,
                    Time: AppreciateTime,
                    len: window.lan,
                    couple: coupling,
                    nameLesson: window.numLesson
                }),
                contentType: 'application/json',
                success: function (data) {

                    if (window.numLesson < 3)
                        window.numLesson += 1;
                    else
                        document.getElementById("playnext").hidden == true;


                    document.getElementById("lessonTitle").innerHTML = data.svgLesson;

                    insert = false;

                    numBlue = 0;
                    var indexSpeech = 0;
                    var last = false;
                    var first = true;
                    BluLineLoc = new Array();
                    array = new Array();
                    allStream = new Array();
                    singleVoices = new Array();

                    if (data.numbers != null && data.numbers != "") {
                        speechit(data.numbers);
                        insert = true;
                    }
                    else
                    {
                        insert = true;

                        numBlue = 0;
                        var indexSpeech = 0;
                        var last = false;
                        var first = true;
                        BluLineLoc = new Array();
                        array = new Array();
                        allStream = new Array();
                        singleVoices = new Array();

                    }

                    canvasProceess(data.image, data.text);

                }
            });
        };
        
        /*
        //for dropping files
        $(function () {
            $('#dropZone').filedrop({
                //saves the svg file
                url: 'Url.Action("saveSvgfile")',
                paramname: 'files',
                maxFiles: 5,
                dragOver: function () {
                    $('#dropZone').css('background', 'blue');
                },
                dragLeave: function () {
                    $('#dropZone').css('background', 'white');
                },
                drop: function () {
                    $('#dropZone').css('background', 'white');
                },
                afterAll: function () {
                    $('#dropZone').css('background', 'white');
                },
                uploadFinished: function (file) {
                    ajaxapload(file);
                }
            });
        });*/
    </script>


</div>
</body>

</html>
